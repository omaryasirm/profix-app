// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Invoice {
  id             Int         @id @default(autoincrement())
  type           InvoiceType @default(INVOICE)
  name           String      @db.Text
  contact        String?     @db.Text
  registrationNo String?     @db.Text
  vehicle        String?     @db.Text
  paymentMethod  String?     @db.Text
  paymentAccount String?     @db.Text
  items          Item[]
  subtotal       Int         @db.Integer
  tax            Int         @db.Integer
  discount       Int         @db.Integer
  total          Int         @db.Integer
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  customer       Customer    @relation(fields: [customerId], references: [id])
  customerId     Int
}

enum InvoiceType {
  INVOICE
  ESTIMATE
}

model Customer {
  id             Int       @id @default(autoincrement())
  name           String    @db.Text
  contact        String?   @db.Text
  registrationNo String?   @db.Text
  vehicle        String?   @db.Text
  invoices       Invoice[]
}

model Item {
  id          Int     @id @default(autoincrement())
  description String  @db.Text
  qty         Int     @db.Integer
  rate        Int     @db.Integer
  amount      Int     @db.Integer
  Invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   Int
}

model searchItems {
  id          Int    @id @default(autoincrement())
  description String @db.Text
}

model Auth {
  id    Int @id @default(autoincrement())
  email String
}

// google auth models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
